#!/usr/bin/python3

"""Uses PyDictionary to define words"""

import argparse
from enum import Enum
from PyDictionary import PyDictionary
import sys, os
dictionary = PyDictionary()

parser = argparse.ArgumentParser()
parser.add_argument('words', nargs='+')
parser.add_argument('--synonyms', '-s', action='store_true')
parser.add_argument('--antonyms', '-a', action='store_true')
parser.add_argument('--translate', '-t', default='')
args = parser.parse_args()

class color(Enum):
   Adverb = '\033[95m'
   Adjective = '\033[96m'
   Noun = '\033[92m'
   Verb = '\033[91m'
   BOLD = '\033[1m'
   END = '\033[0m'

class SurpressOutput(object):
    def __init__(self):
        pass
    def __enter__(self):
        self.devnull = open(os.devnull, 'w')
        sys.stdout.flush()
        sys.stdout = self.devnull
    def __exit__(self, etype, value, trace):
        sys.stdout.flush()
        sys.stdout = sys.__stdout__
        self.devnull.close()

for i in args.words:
    with SurpressOutput():
        d = dictionary.meaning(i)
    print(color.BOLD.value + i + color.END.value)
    if d is not None:
        for k in d:
            print(color[k].value + k + color.END.value)
            print("\n".join(d[k]))
        print("")
    else:
        print("No definitions found")
    if args.synonyms:
        print("%sSynonyms%s: " % (color.BOLD.value, color.END.value) + ", ".join(dictionary.synonym(i)))
    if args.antonyms:
        print("%sAntonyms%s: " % (color.BOLD.value, color.END.value) + ", ".join(dictionary.antonym(i)))
    if args.translate:
        print("%sTranslation to %s%s: %s" % (color.BOLD.value, args.translate, color.END.value, dictionary.translate(i, args.translate)))
